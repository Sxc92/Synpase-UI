---
globs: *.vue,*.ts,*.tsx
description: 状态管理和路由规范 - Pinia + Vue Router
---

# 状态管理和路由规范

## Pinia 状态管理规范

### 1. Store 文件结构
```
src/stores/
├── index.ts              # Store 导出
├── modules/
│   ├── user.ts          # 用户相关状态
│   ├── app.ts           # 应用全局状态
│   └── business/        # 业务相关状态
│       ├── order.ts
│       └── product.ts
└── types/
    ├── user.ts          # 用户相关类型
    └── common.ts        # 通用类型
```

### 2. Store 定义规范
```typescript
// src/stores/modules/user.ts
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { User, UserState } from '@/stores/types/user'

export const useUserStore = defineStore('user', () => {
  // 状态
  const userInfo = ref<User | null>(null)
  const isLoggedIn = ref(false)
  const permissions = ref<string[]>([])

  // 计算属性
  const userDisplayName = computed(() => {
    return userInfo.value?.name || '未登录'
  })

  const hasPermission = computed(() => {
    return (permission: string) => permissions.value.includes(permission)
  })

  // 方法
  const setUserInfo = (user: User) => {
    userInfo.value = user
    isLoggedIn.value = true
  }

  const clearUserInfo = () => {
    userInfo.value = null
    isLoggedIn.value = false
    permissions.value = []
  }

  const updatePermissions = (newPermissions: string[]) => {
    permissions.value = newPermissions
  }

  return {
    // 状态
    userInfo,
    isLoggedIn,
    permissions,
    // 计算属性
    userDisplayName,
    hasPermission,
    // 方法
    setUserInfo,
    clearUserInfo,
    updatePermissions,
  }
})
```

### 3. Store 使用规范
```vue
<template>
  <div>
    <p>欢迎，{{ userStore.userDisplayName }}</p>
    <button @click="handleLogout">退出登录</button>
  </div>
</template>

<script setup lang="ts">
import { useUserStore } from '@/stores/modules/user'

const userStore = useUserStore()

const handleLogout = () => {
  userStore.clearUserInfo()
  // 跳转到登录页
}
</script>
```

## Vue Router 路由规范

### 1. 路由文件结构
```
src/router/
├── index.ts              # 路由主文件
├── routes/
│   ├── core.ts          # 核心模块路由
│   ├── business.ts      # 业务模块路由
│   └── auth.ts          # 认证相关路由
├── guards/
│   ├── auth.ts          # 认证守卫
│   └── permission.ts    # 权限守卫
└── types/
    └── router.ts        # 路由类型定义
```

### 2. 路由定义规范
```typescript
// src/router/routes/core.ts
import type { RouteRecordRaw } from 'vue-router'

export const coreRoutes: RouteRecordRaw[] = [
  {
    path: '/dashboard',
    name: 'Dashboard',
    component: () => import('@/views/core/Dashboard.vue'),
    meta: {
      title: '仪表盘',
      requiresAuth: true,
      permissions: ['dashboard:view'],
    },
  },
  {
    path: '/settings',
    name: 'Settings',
    component: () => import('@/views/core/Settings.vue'),
    meta: {
      title: '设置',
      requiresAuth: true,
      permissions: ['settings:view'],
    },
  },
]

// src/router/routes/business.ts
export const businessRoutes: RouteRecordRaw[] = [
  {
    path: '/orders',
    name: 'Orders',
    component: () => import('@/views/business/Orders.vue'),
    meta: {
      title: '订单管理',
      requiresAuth: true,
      permissions: ['orders:view'],
    },
    children: [
      {
        path: 'list',
        name: 'OrderList',
        component: () => import('@/views/business/OrderList.vue'),
        meta: {
          title: '订单列表',
        },
      },
      {
        path: 'detail/:id',
        name: 'OrderDetail',
        component: () => import('@/views/business/OrderDetail.vue'),
        meta: {
          title: '订单详情',
        },
      },
    ],
  },
]
```

### 3. 路由守卫规范
```typescript
// src/router/guards/auth.ts
import type { NavigationGuardNext, RouteLocationNormalized } from 'vue-router'
import { useUserStore } from '@/stores/modules/user'

export const authGuard = (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext
) => {
  const userStore = useUserStore()
  
  if (to.meta.requiresAuth && !userStore.isLoggedIn) {
    next({ name: 'Login', query: { redirect: to.fullPath } })
    return
  }
  
  next()
}

// src/router/guards/permission.ts
export const permissionGuard = (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext
) => {
  const userStore = useUserStore()
  
  if (to.meta.permissions) {
    const hasPermission = to.meta.permissions.some(permission =>
      userStore.hasPermission(permission)
    )
    
    if (!hasPermission) {
      next({ name: 'Forbidden' })
      return
    }
  }
  
  next()
}
```

### 4. 路由使用规范
```vue
<template>
  <router-link to="/dashboard" class="nav-link">
    仪表盘
  </router-link>
  
  <router-view />
</template>

<script setup lang="ts">
import { useRouter, useRoute } from 'vue-router'

const router = useRouter()
const route = useRoute()

// 编程式导航
const navigateToOrder = (orderId: string) => {
  router.push({
    name: 'OrderDetail',
    params: { id: orderId },
  })
}

// 监听路由变化
watch(() => route.path, (newPath) => {
  console.log('路由变化:', newPath)
})
</script>
```

## Axios HTTP 请求规范

### 1. API 文件结构
```
src/api/
├── index.ts              # API 主文件
├── modules/
│   ├── user.ts          # 用户相关 API
│   ├── order.ts         # 订单相关 API
│   └── product.ts       # 产品相关 API
├── types/
│   ├── request.ts       # 请求类型
│   └── response.ts      # 响应类型
└── interceptors/
    ├── request.ts       # 请求拦截器
    └── response.ts      # 响应拦截器
```

### 2. API 定义规范
```typescript
// src/api/modules/user.ts
import { request } from '@/api'
import type { LoginRequest, LoginResponse, UserInfo } from '@/api/types'

export const userApi = {
  // 用户登录
  login: (data: LoginRequest): Promise<LoginResponse> => {
    return request.post('/auth/login', data)
  },
  
  // 获取用户信息
  getUserInfo: (): Promise<UserInfo> => {
    return request.get('/user/info')
  },
  
  // 更新用户信息
  updateUserInfo: (data: Partial<UserInfo>): Promise<UserInfo> => {
    return request.put('/user/info', data)
  },
}
```

### 3. 请求拦截器规范
```typescript
// src/api/interceptors/request.ts
import type { AxiosRequestConfig } from 'axios'
import { useUserStore } from '@/stores/modules/user'

export const requestInterceptor = (config: AxiosRequestConfig) => {
  const userStore = useUserStore()
  
  // 添加认证 token
  if (userStore.userInfo?.token) {
    config.headers.Authorization = `Bearer ${userStore.userInfo.token}`
  }
  
  // 添加请求时间戳
  config.headers['X-Request-Time'] = Date.now().toString()
  
  return config
}
```

## 最佳实践总结

### 1. 状态管理
- 使用 Pinia 的 Composition API 风格
- Store 按功能模块划分
- 状态保持扁平化，避免嵌套过深
- 使用计算属性处理派生状态

### 2. 路由管理
- 路由按模块划分
- 使用路由守卫处理认证和权限
- 路由元信息包含标题、权限等
- 懒加载组件提升性能

### 3. HTTP 请求
- API 按模块组织
- 使用拦截器统一处理请求和响应
- 错误处理统一化
- 请求类型严格定义